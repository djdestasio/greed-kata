// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.17929
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace GreedKata.Specs
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("DiceRoller")]
    public partial class DiceRollerFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "DiceRoller.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "DiceRoller", "In order to play the game\r\nas a user\r\nI want to be able to roll five dice and get" +
                    " a scored", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 6
#line 7
testRunner.Given("that I have a roll scorer", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Single One")]
        public virtual void SingleOne()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Single One", ((string[])(null)));
#line 12
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Value"});
            table1.AddRow(new string[] {
                        "1"});
#line 13
testRunner.Given("that I have rolled the following values", ((string)(null)), table1, "Given ");
#line 16
testRunner.When("I score the roll", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 17
testRunner.Then("the score should be 100", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Double ones")]
        public virtual void DoubleOnes()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Double ones", ((string[])(null)));
#line 19
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Value"});
            table2.AddRow(new string[] {
                        "1"});
            table2.AddRow(new string[] {
                        "1"});
#line 20
testRunner.Given("that I have rolled the following values", ((string)(null)), table2, "Given ");
#line 24
testRunner.When("I score the roll", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 25
testRunner.Then("the score should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Triple Ones")]
        public virtual void TripleOnes()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Triple Ones", ((string[])(null)));
#line 27
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Value"});
            table3.AddRow(new string[] {
                        "1"});
            table3.AddRow(new string[] {
                        "1"});
            table3.AddRow(new string[] {
                        "1"});
#line 28
testRunner.Given("that I have rolled the following values", ((string)(null)), table3, "Given ");
#line 33
testRunner.When("I score the roll", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 34
testRunner.Then("the score should be 1000", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Triple Twos")]
        public virtual void TripleTwos()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Triple Twos", ((string[])(null)));
#line 36
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Value"});
            table4.AddRow(new string[] {
                        "2"});
            table4.AddRow(new string[] {
                        "2"});
            table4.AddRow(new string[] {
                        "2"});
#line 37
testRunner.Given("that I have rolled the following values", ((string)(null)), table4, "Given ");
#line 42
testRunner.When("I score the roll", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 43
testRunner.Then("the score should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Triple Threes")]
        public virtual void TripleThrees()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Triple Threes", ((string[])(null)));
#line 45
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Value"});
            table5.AddRow(new string[] {
                        "3"});
            table5.AddRow(new string[] {
                        "3"});
            table5.AddRow(new string[] {
                        "3"});
#line 46
testRunner.Given("that I have rolled the following values", ((string)(null)), table5, "Given ");
#line 51
testRunner.When("I score the roll", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 52
testRunner.Then("the score should be 300", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Triple Fours")]
        public virtual void TripleFours()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Triple Fours", ((string[])(null)));
#line 54
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Value"});
            table6.AddRow(new string[] {
                        "4"});
            table6.AddRow(new string[] {
                        "4"});
            table6.AddRow(new string[] {
                        "4"});
#line 55
testRunner.Given("that I have rolled the following values", ((string)(null)), table6, "Given ");
#line 60
testRunner.When("I score the roll", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 61
testRunner.Then("the score should be 400", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Single Five")]
        public virtual void SingleFive()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Single Five", ((string[])(null)));
#line 63
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Value"});
            table7.AddRow(new string[] {
                        "5"});
#line 64
testRunner.Given("that I have rolled the following values", ((string)(null)), table7, "Given ");
#line 67
testRunner.When("I score the roll", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 68
testRunner.Then("the score should be 50", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Triple Fives")]
        public virtual void TripleFives()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Triple Fives", ((string[])(null)));
#line 70
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Value"});
            table8.AddRow(new string[] {
                        "5"});
            table8.AddRow(new string[] {
                        "5"});
            table8.AddRow(new string[] {
                        "5"});
#line 71
testRunner.Given("that I have rolled the following values", ((string)(null)), table8, "Given ");
#line 76
testRunner.When("I score the roll", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 77
testRunner.Then("the score should be 500", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Triple Sixes")]
        public virtual void TripleSixes()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Triple Sixes", ((string[])(null)));
#line 79
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "Value"});
            table9.AddRow(new string[] {
                        "6"});
            table9.AddRow(new string[] {
                        "6"});
            table9.AddRow(new string[] {
                        "6"});
#line 80
testRunner.Given("that I have rolled the following values", ((string)(null)), table9, "Given ");
#line 85
testRunner.When("I score the roll", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 86
testRunner.Then("the score should be 600", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Example 1")]
        public virtual void Example1()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Example 1", ((string[])(null)));
#line 91
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "Value"});
            table10.AddRow(new string[] {
                        "1"});
            table10.AddRow(new string[] {
                        "1"});
            table10.AddRow(new string[] {
                        "1"});
            table10.AddRow(new string[] {
                        "5"});
            table10.AddRow(new string[] {
                        "1"});
#line 92
testRunner.Given("that I have rolled the following values", ((string)(null)), table10, "Given ");
#line 99
testRunner.When("I score the roll", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 100
testRunner.Then("the score should be 1150", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Example 2")]
        public virtual void Example2()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Example 2", ((string[])(null)));
#line 103
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "Value"});
            table11.AddRow(new string[] {
                        "2"});
            table11.AddRow(new string[] {
                        "3"});
            table11.AddRow(new string[] {
                        "4"});
            table11.AddRow(new string[] {
                        "6"});
            table11.AddRow(new string[] {
                        "2"});
#line 104
testRunner.Given("that I have rolled the following values", ((string)(null)), table11, "Given ");
#line 111
testRunner.When("I score the roll", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 112
testRunner.Then("the score should be 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Example 3")]
        public virtual void Example3()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Example 3", ((string[])(null)));
#line 115
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "Value"});
            table12.AddRow(new string[] {
                        "3"});
            table12.AddRow(new string[] {
                        "4"});
            table12.AddRow(new string[] {
                        "5"});
            table12.AddRow(new string[] {
                        "3"});
            table12.AddRow(new string[] {
                        "3"});
#line 116
testRunner.Given("that I have rolled the following values", ((string)(null)), table12, "Given ");
#line 123
testRunner.When("I score the roll", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 124
testRunner.Then("the score should be 350", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Example 4")]
        public virtual void Example4()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Example 4", ((string[])(null)));
#line 127
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "Value"});
            table13.AddRow(new string[] {
                        "1"});
            table13.AddRow(new string[] {
                        "5"});
            table13.AddRow(new string[] {
                        "1"});
            table13.AddRow(new string[] {
                        "2"});
            table13.AddRow(new string[] {
                        "4"});
#line 128
testRunner.Given("that I have rolled the following values", ((string)(null)), table13, "Given ");
#line 135
testRunner.When("I score the roll", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 136
testRunner.Then("the score should be 250", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Example 5")]
        public virtual void Example5()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Example 5", ((string[])(null)));
#line 139
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                        "Value"});
            table14.AddRow(new string[] {
                        "5"});
            table14.AddRow(new string[] {
                        "5"});
            table14.AddRow(new string[] {
                        "5"});
            table14.AddRow(new string[] {
                        "5"});
            table14.AddRow(new string[] {
                        "5"});
#line 140
testRunner.Given("that I have rolled the following values", ((string)(null)), table14, "Given ");
#line 147
testRunner.When("I score the roll", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 148
testRunner.Then("the score should be 600", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Prevent throwing more than 6 die")]
        public virtual void PreventThrowingMoreThan6Die()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Prevent throwing more than 6 die", ((string[])(null)));
#line 153
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                        "Value"});
            table15.AddRow(new string[] {
                        "5"});
            table15.AddRow(new string[] {
                        "5"});
            table15.AddRow(new string[] {
                        "5"});
            table15.AddRow(new string[] {
                        "5"});
            table15.AddRow(new string[] {
                        "5"});
            table15.AddRow(new string[] {
                        "5"});
            table15.AddRow(new string[] {
                        "5"});
#line 154
testRunner.Given("that I have rolled the following values", ((string)(null)), table15, "Given ");
#line 163
testRunner.When("I score the roll", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 164
testRunner.Then("an argument exception should be thrown", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
